package DanMu.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CharinfoTable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Command = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Commands = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Emitter = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0d).create();
  private final ConceptPresentation props_Projectile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Shot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TableRow = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Tween = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Wait = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_CharinfoTable;
      case 1:
        return props_Command;
      case 2:
        return props_Commands;
      case 3:
        return props_Emitter;
      case 4:
        return props_Projectile;
      case 5:
        return props_Shot;
      case 6:
        return props_TableRow;
      case 7:
        return props_Tween;
      case 8:
        return props_Wait;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
