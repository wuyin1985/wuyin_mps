package DanMu.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.wuyin.TableRow;
import jetbrains.mps.util.Computable;
import com.wuyin.TableData;
import com.wuyin.TableDatas;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TableRow_4548053250353940553(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0x2c11b20feacb25cfL, "DanMu.structure.TableRow").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        Iterable<TableRow> queryResult = new Computable<Iterable<TableRow>>() {
          public Iterable<TableRow> compute() {
            TableData t = TableDatas.GetInstance().Load("table/char.info.lua");
            return t.getList();
          }
        }.compute();
        if (queryResult != null) {
          for (final TableRow item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode r = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0x2c11b20feacb25cfL, "DanMu.structure.TableRow"));
                SPropertyOperations.set(r, MetaAdapterFactory.getProperty(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0x2c11b20feacb25cfL, 0x2c11b20feacb282fL, "id"), (item).id + "");
                SPropertyOperations.set(r, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), (item).name);
                return r;
              }
              public String getMatchingText(String pattern) {
                return (item).id + "";
              }
              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
              public String getDescriptionText(String pattern) {
                return (item).name;
              }
            });
          }
        }
      }
    }
    return result;
  }
}
