package DanMu.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import java.util.HashMap;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_t8hmqt_a0c.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return new Commands_TextGen();
          }
          break;
        case 1:
          if (true) {
            return new Emitter_TextGen();
          }
          break;
        case 2:
          if (true) {
            return new Shot_TextGen();
          }
          break;
        case 3:
          if (true) {
            return new Tween_TextGen();
          }
          break;
        case 4:
          if (true) {
            return new Wait_TextGen();
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(MetaAdapterFactory.getConcept(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0x4a317ee293141835L, "DanMu.structure.Emitter"))) {
        String fname = getFileName_Emitter(root);
        String ext = getFileExtension_Emitter(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_Emitter(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_Emitter(SNode node) {
    return "lua";
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_t8hmqt_a0c = buildConceptIndices(MetaAdapterFactory.getConcept(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0x1149ba63db31c4f5L, "DanMu.structure.Commands"), MetaAdapterFactory.getConcept(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0x4a317ee293141835L, "DanMu.structure.Emitter"), MetaAdapterFactory.getConcept(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0x14aa56594cd51205L, "DanMu.structure.Shot"), MetaAdapterFactory.getConcept(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0xdd955d58d0549acL, "DanMu.structure.Tween"), MetaAdapterFactory.getConcept(0xf308bac3fb954e51L, 0x8457a8a5d4e826acL, 0x14aa56594cd7c79dL, "DanMu.structure.Wait"));
}
