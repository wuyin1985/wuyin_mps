package DataModel.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.GroupMenuPart;
import java.util.Arrays;
import jetbrains.mps.lang.editor.menus.ParameterizedMenuPart;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.editor.menus.SingleItemMenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.nodeEditor.cellMenu.SideTransformCompletionActionItem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class table_dot_op extends TransformationMenuBase {
  private final Set<String> myLocations = SetSequence.fromSetAndArray(new HashSet<String>(), MenuLocations.RIGHT_SIDE_TRANSFORM);
  @Override
  public boolean isApplicableToLocation(@NotNull String location) {
    return SetSequence.fromSet(myLocations).contains(location);
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.RIGHT_SIDE_TRANSFORM).contains(_context.getMenuLocation())) {
      result.add(new table_dot_op.TransformationMenuPart_Group_9rhjpw_a0());
    }
    return result;
  }

  public class TransformationMenuPart_Group_9rhjpw_a0 extends GroupMenuPart<TransformationMenuItem, TransformationMenuContext> {
    @Override
    protected boolean isApplicable(TransformationMenuContext _context) {
      return true;
    }

    @Override
    protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
      return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new table_dot_op.TransformationMenuPart_Group_9rhjpw_a0.TransformationMenuPart_Parameterized_9rhjpw_a0a());
    }
    private class TransformationMenuPart_Parameterized_9rhjpw_a0a extends ParameterizedMenuPart<SNode, TransformationMenuItem, TransformationMenuContext> {

      @NotNull
      @Override
      protected List<TransformationMenuItem> createItems(SNode parameter, TransformationMenuContext context) {
        return new table_dot_op.TransformationMenuPart_Group_9rhjpw_a0.TransformationMenuPart_Parameterized_9rhjpw_a0a.TransformationMenuPart_Action_9rhjpw_a0a0(parameter).createItems(context);
      }

      @Nullable
      @Override
      protected Iterable<? extends SNode> getParameters(TransformationMenuContext _context) {
        ArrayList<SNode> seq = new ArrayList<SNode>();
        for (SNode f : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getReferenceLink(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7e250666cd08026cL, 0x7e250666cd08026dL, "table")), MetaAdapterFactory.getContainmentLink(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7c563eb53eec164eL, 0x6a9d6b2bd5de761aL, "fields")))) {
          seq.add(f);
        }
        return seq;
      }

      private class TransformationMenuPart_Action_9rhjpw_a0a0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
        private final SNode myParameterObject;
        public TransformationMenuPart_Action_9rhjpw_a0a0(SNode parameterObject) {
          myParameterObject = parameterObject;
        }
        @Nullable
        protected TransformationMenuItem createItem(TransformationMenuContext context) {
          return new table_dot_op.TransformationMenuPart_Group_9rhjpw_a0.TransformationMenuPart_Parameterized_9rhjpw_a0a.TransformationMenuPart_Action_9rhjpw_a0a0.Item(context);
        }

        private class Item extends ActionItemBase implements SideTransformCompletionActionItem {
          private final TransformationMenuContext _context;

          private Item(TransformationMenuContext context) {
            _context = context;
          }

          @Nullable
          @Override
          public String getLabelText(String pattern) {
            return "." + SPropertyOperations.getString(myParameterObject, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
          }

          @Override
          public void execute(@NotNull String pattern) {
            SNode tf = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x123e4f2456b4f8c5L, "DataModel.structure.LuaTF"));
            SLinkOperations.setTarget(tf, MetaAdapterFactory.getReferenceLink(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x123e4f2456b4f8c5L, 0x123e4f2456b4f8c6L, "table"), SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getReferenceLink(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7e250666cd08026cL, 0x7e250666cd08026dL, "table")));
            SLinkOperations.setTarget(tf, MetaAdapterFactory.getReferenceLink(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x123e4f2456b4f8c5L, 0x123e4f2456b4f8c8L, "field"), myParameterObject);
            SNodeOperations.replaceWithAnother(_context.getNode(), tf);
          }


          @Override
          public String getShortDescriptionText(@NotNull String pattern) {
            return SPropertyOperations.getString(myParameterObject, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
          }
        }
      }
    }
  }
}
