package DataModel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.wuyin.Field;
import com.wuyin.TableDatas;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.ModelAccess;

public class LuaTable_Constraints extends BaseConstraintsDescriptor {
  public LuaTable_Constraints() {
    super(MetaAdapterFactory.getConcept(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7c563eb53eec164eL, "DataModel.structure.LuaTable"));
  }

  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7c563eb53eec164eL, 0x7cbec709645ceee2L, "tableName"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7c563eb53eec164eL, 0x7cbec709645ceee2L), this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "tableName";
        {
          ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7c563eb53eec164eL, 0x6a9d6b2bd5de761aL, "fields"))).clear();
          Iterable<Field> fields = TableDatas.GetInstance().LoadTableDefine("table/types.lua", (SPropertyOperations.getString(propertyValue)));
          {
            Field f;
            Iterator<Field> f_iterator = Sequence.fromIterable(fields).iterator();
            while (true) {
              if (!(f_iterator.hasNext())) {
                break;
              }
              f = f_iterator.next();
              {
                SNode s = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7cbac5d8e7d43e06L, "DataModel.structure.LuaTableField"));
                SPropertyOperations.set(s, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), f.name);
                ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7c563eb53eec164eL, 0x6a9d6b2bd5de761aL, "fields"))).addElement(s);
              }
            }
          }
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7c563eb53eec164eL, 0x7cbec709645ceee2L, "tableName"), (SPropertyOperations.getString(propertyValue)));

        }
      }
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "tableName";
        {
          Iterable<Field> fields = TableDatas.GetInstance().LoadTableDefine("table/types.lua", (SPropertyOperations.getString(propertyValue)));
          boolean ret = (Sequence.fromIterable(fields).count() > 0);
          if (!(ret)) {
            ModelAccess.instance().runWriteAction(new Runnable() {
              public void run() {
                ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xa61bdb2ea7448deL, 0x85237d716d56eee2L, 0x7c563eb53eec164eL, 0x6a9d6b2bd5de761aL, "fields"))).clear();
              }
            });
          }
          return ret;
        }
      }
    });
    return properties;
  }
}
